# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-08-27 06:56
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def populate_season(apps, schema_editor):
    """
    Populates season fields for PersonSeason already on the database.
    """
    import logging

    db_alias = schema_editor.connection.alias
    PersonSeason = apps.get_model('teams', 'PersonSeason')
    Season = apps.get_model('matches', 'Season')

    for row in PersonSeason.objects.using(db_alias).all():
        try:
            season = Season.objects.get(date_end__year=row.year,
                                        tourn=row.tourn)
            row.season = season
            row.save()
        except Exception as e:
            logging.exception(e)


def get_role_mapper(reverse=False):
    """
    Returns role mapper depending on migration direction
    """
    role_map = {
        'prop': '01-prop',
        'hooker': '02-hooker',
        'lock': '03-lock',
        'backrow': '04-backrow', 
        'scrum-half': '05-scrum-half', 
        'fly-half': '06-fly-half',
        'center': '07-center', 
        'winger': '08-winger', 
        'fullback': '09-fullback',
        'player': '20-player', 
        'referee': '30-referee', 
        'coach': '40-coach'
    }
    reverse_role_map = {v: k for k, v in role_map.items()}

    return role_map if not reverse else reverse_role_map


def populate_role(apps, schema_editor):
    """
    Populates role fields for PersonSeason already on the database.
    """
    db_alias = schema_editor.connection.alias
    PersonSeason = apps.get_model('teams', 'PersonSeason')
    mapper = get_role_mapper()

    for row in PersonSeason.objects.using(db_alias).all():
        if row.role in mapper:
            row.role = mapper[row.role]
            row.save()


def reverse_populate_role(apps, schema_editor, reverse=False):
    """
    Populates role fields for PersonSeason when downgrade migration.
    """
    db_alias = schema_editor.connection.alias
    PersonSeason = apps.get_model('teams', 'PersonSeason')
    mapper = get_role_mapper(reverse=True)

    for row in PersonSeason.objects.using(db_alias).all():
        if row.role in mapper:
            row.role = mapper[row.role]
            row.save()


class Migration(migrations.Migration):

    dependencies = [
        ('matches', '0003_add_level_to_Tournament'),
        ('teams', '0013_teamseason_stat_fields'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='personseason',
            options={'ordering': ('-year', 'role')},
        ),
        migrations.AddField(
            model_name='personseason',
            name='season',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_person_seasons', to='matches.Season', verbose_name='Турнир'),
        ),
        migrations.RunPython(
            populate_season, 
            reverse_code=migrations.RunPython.noop
        ),
        migrations.AlterField(
            model_name='personseason',
            name='role',
            field=models.CharField(choices=[('20-player', 'игрок'), ('01-prop', '1/3'), ('02-hooker', '2'), ('03-lock', '4/5'), ('04-backrow', '6-8'), ('05-scrum-half', '9'), ('06-fly-half', '10'), ('07-center', '12/13'), ('08-winger', '11/14'), ('09-fullback', '15'), ('30-referee', 'судья'), ('coach', 'тренер')], default='20-player', max_length=127, verbose_name='Амплуа'),
        ),
        migrations.RunPython(
            populate_role, 
            reverse_populate_role
        ),
    ]
